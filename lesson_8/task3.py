"""3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного задания
примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента необходимо
реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не
позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не
должна завершаться. """


class MyValueError(ValueError):
    def __init__(self, txt):
        self.text = txt


def is_float(a: str) -> bool:
    try:
        float(a)
    except ValueError:
        return False
    else:
        return True


a_lst = []

while True:
    try:
        i = input('Введите число для добавления в список или stop для остановки: ')
        if i == 'stop':
            print(a_lst)
            break
        if is_float(i):
            i = int(i) if i.find('.') == -1 else float(i)
            a_lst.append(i)
        else:
            raise MyValueError('Ошибка: вы ввели не число')
    except MyValueError as e:
        print(e)
